(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function applyControllers (app) {
    app.controller('HomeController', ['$scope', require('./controllers/home.js')]);
    app.controller('RegisterController', ['$scope', require('./controllers/register.js')]);
    app.controller('ProfileController', ['$scope', require('./controllers/profile.js')]);
    app.controller('CreateCorpusController', ['$scope', require('./controllers/createcorpus.js')]);
};
},{"./controllers/createcorpus.js":8,"./controllers/home.js":9,"./controllers/profile.js":10,"./controllers/register.js":11}],2:[function(require,module,exports){
// includes
var CoocProcesser = require('../../modules/CoocProcesser');
var d3 = window.d3 || null;

var matrix_mouseover = function (p) {
    var g = d3.select(this).node();
    $('#'+g.id).css('cursor','pointer');
    d3.selectAll('.row text').classed('active', function(d, i) { return i === p.y; });
    d3.selectAll('.column text').classed('active', function(d, i) { return i === p.x; });
};

var matrix_mouseout = function () {
    d3.selectAll('text').classed('active', false);
};

var matrix_order = function (svg,orders,x,value) {
    x.domain(orders[value]);

    var t = svg.transition().duration(1500);
    t.selectAll('.row')
        .delay(function(d, i) { return x(i) * 4; })
        .attr('transform', function(d, i) { return 'translate(0,' + x(i) + ')'; })
        .selectAll('.cell')
        .delay(function(d) { return x(d.x) * 4; })
        .attr('x', function(d) { return x(d.x); });

    t.selectAll('.column')
        .delay(function(d, i) { return x(i) * 4; })
        .attr('transform', function(d, i) { return 'translate(' + x(i) + ')rotate(-90)'; });
};

 //renders the d3 graph
var createCoocMatrix = function (miserables, container) {
    var margin = {top: 80, right: 0, bottom: 10, left: 80};
    var width = 1000;
    var height = 1000;

    var x = d3.scale.ordinal().rangeBands([0, width]);
    var z = d3.scale.linear().domain([0, 4]).clamp(true);
    var c = d3.scale.category20().domain(d3.range(20));

    var svg = d3.select(container).append('svg')
        .attr('width', width + margin.left + margin.right)
        .attr('height', height + margin.top + margin.bottom)
        .style('margin-left', -margin.left + 'px')
        .append('g')
        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    var matrix = [];
    var nodes = miserables.nodes;
    var n = nodes.length;

    // Compute index per node.
    nodes.forEach(function(node, i) {
        node.index = i;
        node.count = 0;
        matrix[i] = d3.range(n).map(function(j) { return {x: j, y: i, z: 0}; });
    });

    // Convert links to matrix; count character occurrences.
    miserables.links.forEach(function(link) {
        matrix[link.source][link.target].z += link.value;
        matrix[link.target][link.source].z += link.value;
        matrix[link.source][link.source].z += link.value;
        matrix[link.target][link.target].z += link.value;
        nodes[link.source].count += link.value;
        nodes[link.target].count += link.value;
    });
    // Precompute the orders.
    var orders = {
        name: d3.range(n).sort(function(a, b) { return d3.ascending(nodes[a].name, nodes[b].name); }),
        count: d3.range(n).sort(function(a, b) { return nodes[b].count - nodes[a].count; }),
        group: d3.range(n).sort(function(a, b) { return nodes[b].group - nodes[a].group; })
    };
    // The default sort order.
    x.domain(orders.name);
    svg.append('rect')
        .attr('class', 'cell-background')
        .attr('width', width)
        .attr('height', height);

    var processRow = function (row) {
        var cell = d3.select(this).selectAll('.cell')
            .data(row.filter(function(d) { return d.z; }))
            .enter().append('rect')
            .attr('class', 'cell')
            .attr('x', function(d) { return x(d.x); })
            .attr('width', x.rangeBand())
            .attr('height', x.rangeBand())
            .attr('id', function(d) { return 'rel_'+nodes[d.x].index+'_'+nodes[d.y].index; })
            .style('fill-opacity', function(d) { return z(d.z); })
            .style('fill', function(d) { return nodes[d.x].group === nodes[d.y].group ? c(nodes[d.x].group) : null; })
            .on('mouseover', matrix_mouseover)
            .on('mouseout', function(d) { matrix_mouseout(d); });
    };

    var row = svg.selectAll('.row')
        .data(matrix)
        .enter().append('g')
        .attr('class', 'row')
        .attr('transform', function(d, i) { return 'translate(0,' + x(i) + ')'; })
        .each(processRow);

    row.append('line').attr('x2', width);

    row.append('text')
        .attr('x', -6)
        .attr('y', x.rangeBand() / 2)
        .attr('dy', '.32em')
        .attr('text-anchor', 'end')
        .attr('id', function(d, i) { return 'node_'+nodes[i].index; })
        .attr('title', function(d, i) { return nodes[i].uri; })
        .text(function(d, i) { return nodes[i].name; });

    var column = svg.selectAll('.column')
        .data(matrix)
        .enter().append('g')
        .attr('class', 'column')
        .attr('transform', function(d, i) { return 'translate(' + x(i) + ')rotate(-90)'; });

    column.append('line')
        .attr('x1', -width);

    column.append('text')
        .attr('x', 6)
        .attr('y', x.rangeBand() / 2)
        .attr('dy', '.32em')
        .attr('id', function(d, i) { return 'node_'+nodes[i].index; })
        .attr('title', function(d, i) { return nodes[i].uri; })
        .attr('text-anchor', 'start')
        .text(function(d, i) { return nodes[i].name; });

    $(container).append('<div class="matrix-color-legend"><table cellpadding="5" cellspacing="3"></table></div>');
    var not_repeat=[];
    $.each(miserables.nodes,function(i,v){
        if(not_repeat.indexOf(v.group) === -1){
            not_repeat.push(v.group);
            $(container+' .matrix-color-legend table').append('<tr style="color:#FFF;background-color:'+c(v.group)+'"><td>'+miserables.groups[v.group]+'</td></tr>');
        }
    });
    $(container+' .matrix-color-legend').attr('style','position:absolute;top:300px;right:10px;overflow:hidden;');

    var timeout = setTimeout(function() {
        matrix_order(svg,orders,x,'group');
    }, 500);
};

module.exports = function CorpusCoocController($scope, $state, $sce) {
    // get data
    $.getJSON('/api/corpus/' + $scope.currentCorpus._id + '/cooc', function(data) {
        var processedData = CoocProcesser.processData(data);
        createCoocMatrix(processedData,'#coocContainer');
    });
};

},{"../../modules/CoocProcesser":18}],3:[function(require,module,exports){
// includes
var FacetsProcesser = require('../../modules/FacetsProcesser');

distillEnglish = function(title) {
    if( !title )
        return ""
    for( var i = 0 ; i < title.length ; i++ ) {
        if( (typeof title[i] != "string")
            && title[i]["en"] ){
            return title[i]["en"];
        }
    }
    for( var i = 0 ; i < title.length ; i++ ) {
        if( typeof title[i] == "string" )
            return title[i];
    }
    return title;
}

module.exports = function EdcatDatasetsController($scope, $state, $sce) {

    // get data
    $.getJSON('/api/corpus/' + $scope.currentCorpus._id + '/facets', function(data) {
        allEntities = data.articles[0].entities;
        foundUris = []
        foundEntities = []
        for( var i = 0 ; i < allEntities.length ; i++ ) {
            if( $.inArray(allEntities[i].uri, foundUris) === -1 ) {
                foundEntities.push(allEntities[i]);
                foundUris.push(allEntities[i].uri)
            }
        }

        $scope.entities = foundEntities;
        
        $scope.baseURL = "localhost:8081"

        $scope.entities.map( function( entity ) {
            entity.active = true;
        } );

        $scope.toggleActive = function( item ) {
            item.active = !item.active;
            $scope.fetchDatasets();
        }

        $scope.itemActive = function( item ) {
            return item.active;
        }

        $scope.fetchDatasets = function() {
            activeEntities = []
            $scope.datasets = []
            $scope.entities.map( function( entity ) {
                if( entity.active )
                    activeEntities.push( entity );
            });
            path = "http://" + $scope.baseURL + "/edcat/context/search?" + activeEntities.map(function(entity){ return "tagIds[]=" + encodeURIComponent(entity.uri) + ""; }).join("&")
            
            console.log("Requesting " + path);

            $.getJSON(path, function(data) {
                $scope.datasets = data;
                for( var i = 0 ; i < data.length ; i++ ){
                    data[i].title = distillEnglish(data[i].title);
                    data[i].description = distillEnglish(data[i].description);
                }
                console.log("Received response for " + path);
                $state.reload();
            });
        };

        $scope.fetchDatasets();

    });
};

},{"../../modules/FacetsProcesser":19}],4:[function(require,module,exports){
// includes
var FacetsProcesser = require('../../modules/FacetsProcesser');

// data
var facetsData;
var types, entities, articles;

module.exports = function CorpusFacetsController($scope, $state, $sce) {
    // init empty facet filters
    $scope.typeFilter = undefined;
    $scope.entityFilter = undefined;
    $scope.articleFilter = undefined;

    $scope.setFilter = function(item) {
        switch(item.type) {
            case 'article':
                if($scope.articleFilter === item.id) {
                    $scope.articleFilter = undefined;
                } else {
                    $scope.articleFilter = item.id;
                }
                break;
            case 'entity':
                if($scope.entityFilter === item.id) {
                    $scope.entityFilter = undefined;
                } else {
                    $scope.entityFilter = item.id;
                }
                break;
            case 'type':
                if($scope.typeFilter === item.id) {
                    $scope.typeFilter = undefined;
                } else {
                    $scope.typeFilter = item.id;
                }
                break;
        }
    };

    $scope.itemActive = function(item) {
        switch(item.type) {
            case 'article':
                return $scope.articleFilter === item.id;
            case 'entity':
                return $scope.entityFilter === item.id;
            case 'type':
                return $scope.typeFilter === item.id;
        }
    };

    $scope.facetFilter = function (item) {
        var filterArticle = false;
        var filterEntity = false;
        var filterType = false;

        switch(item.type) {
            case 'article':
                if($scope.entityFilter !== undefined) {
                    filterEntity = item.entities.indexOf($scope.entityFilter) !== -1;
                } else {
                    filterEntity = true;
                }
                if($scope.typeFilter !== undefined) {
                    filterType = item.types.indexOf($scope.typeFilter) !== -1;
                } else {
                    filterType = true;
                }
                return filterEntity && filterType;
            case 'entity':
                if($scope.articleFilter !== undefined) {
                    filterArticle = item.articles.indexOf($scope.articleFilter) !== -1;
                } else {
                    filterArticle = true;
                }
                if($scope.typeFilter !== undefined) {
                    filterType = item.types.indexOf($scope.typeFilter) !== -1;
                } else {
                    filterType = true;
                }
                return filterArticle && filterType;
            case 'type':
                if($scope.articleFilter !== undefined) {
                    filterArticle = item.articles.indexOf($scope.articleFilter) !== -1;
                } else {
                    filterArticle = true;
                }
                if($scope.entityFilter !== undefined) {
                    filterEntity = item.entities.indexOf($scope.entityFilter) !== -1;
                } else {
                    filterEntity = true;
                }
                return filterArticle && filterEntity;
        }
    };

    // get data
    $.getJSON('/api/corpus/' + $scope.currentCorpus._id + '/facets', function(data) {
        facetsData = FacetsProcesser.processData(data);

        // types
        types = facetsData.types;
        // entities
        entities = facetsData.entities;
        // articles
        articles = facetsData.articles;
        for(var i = 0; i < articles.length; i++) {
            articles[i].sourceSafe = $sce.trustAsHtml(articles[i].source);
        }
        // update data in scope
        $scope.data = [
            {name: 'Articles', values: articles},
            {name: 'Types', values: types},
            {name: 'Entities', values: entities},
        ];

        // redraw
        $state.reload();
    });
};

},{"../../modules/FacetsProcesser":19}],5:[function(require,module,exports){
// extentions
var extentions = require('../../data/corpusextentions');

// default socket port
var defaultPort = '8081';

// corpus object
var currentCorpus = {
    uri: function() {
        var it = this.input_type;
        if(it === 'twitter') {
            return 'http://twitter.com/' + this.input;
        } else if(it === 'direct') {
            return '-';
        } else {
            return this.input;
        }
    }
};

// progress websocket
var initProgressWebsocket = function($scope) {
    var location = document.location.hostname + ':' + defaultPort + document.location.pathname.replace('/overview', '');
    console.log('connecting to socket', location);
    var socket = new WebSocket('ws://' + location);
    socket.onerror = function(err) {
        console.log(err);
    };
    socket.onopen = function () {
        $scope.$apply(function() {
            $scope.progress.show = true;
        });
    };
    socket.onmessage = function (event) {
        var data = JSON.parse(event.data);
        $scope.$apply(function() {
            $scope.progress.type = data.type;
            $scope.progress.progress = data.progress;
        });
    };
    socket.onclose = function () {
        $scope.$apply(function() {
            $scope.progress.show = false;
        });
    };
};

module.exports = function MainCorpusController($scope, $location, $state, corpus) {
    // set current corpus data
    currentCorpus = _.extend(currentCorpus, corpus.data);
    // expose corpus to scope
    $scope.currentCorpus = currentCorpus;

    // expose math
    $scope.Math = Math;
    // should show progress bar
    $scope.progress = {
        show: false,
        progress: 0,
        type: ''
    };

    // init extentions
    $scope.extentions = extentions;
    // expose state
    $scope.$state = $state;

    // render first view if needed
    $scope.$on('$viewContentLoaded', function onRender() {
        // init progress websocket if corpus is not processed yet
        if(!currentCorpus.processed) {
            initProgressWebsocket($scope);
        }

        // see if we need to change path
        var len = $location.path().split('/').length;
        // if page is just loaded
        if(len === 3) {
            // redirect to first subview
            $state.go('corpus.'+extentions[0].name);
        }
    });
};

},{"../../data/corpusextentions":13}],6:[function(require,module,exports){
module.exports = function CorpusOverviewController($scope, $state, $sce) {
    //console.log('corpus overview');
};

},{}],7:[function(require,module,exports){
// includes
var RelationsProcesser = require('../../modules/RelationsProcesser');
var d3 = window.d3 || null;

// fade for d3
var fade = function (opacity, svg) {
    return function(d, i) {
        svg.selectAll('path.chord')
            .filter(function(d) { return d.source.index !== i && d.target.index !== i; })
            .transition().style('stroke-opacity', opacity)
            .style('fill-opacity', opacity);
    };
};

//renders the d3 graph
var createRelChart = function (data, container){
    var matrix=data.relations;
    var scores=data.scores;
    var entityNames=data.entityNames;
    var entityURIs=data.entityURIs;
    //start d3
    var w = 1000,
    h = 900,
    r1 = h / 2,
    r0 = r1 - 80;
    var fill = d3.scale.category20c();

    var chord = d3.layout.chord()
        .padding(0.04)
        .sortSubgroups(d3.descending)
        .sortChords(d3.descending);

    var arc = d3.svg.arc()
        .innerRadius(r0)
        .outerRadius(r0 + 20);

    var svg = d3.select(container).append('svg:svg')
        .attr('width', w)
        .attr('height', h)
        .append('svg:g')
        .attr('transform', 'translate(' + w / 2 + ',' + h / 2 + ')');

    chord.matrix(matrix);

    var g = svg.selectAll('g.group')
        .data(chord.groups)
        .enter().append('svg:g')
        .attr('class', 'group')
        .on('mouseover', fade(0.02, svg))
        .on('mouseout', fade(0.80, svg));
    g.append('svg:path')
        .style('stroke', function(d) { return fill(d.index); })
        .style('fill', function(d) { return fill(d.index); })
        .attr('id',function(d) { return 'path_'+d.index; })
        .attr('d', arc);

    g.append('svg:text')
        .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
        .attr('dy', '.35em')
        .attr('id',function(d) { return 'label_'+d.index; })
        .attr('text-anchor', function(d) { return d.angle > Math.PI ? 'end' : null; })
        .attr('transform', function(d) {
            return 'rotate(' + (d.angle * 180 / Math.PI - 90) + ')' +
                'translate(' + (r0 + 26) + ')' +
                (d.angle > Math.PI ? 'rotate(180)' : '');
        })
        .text(function(d) { return entityNames[d.index]; });

    svg.selectAll('path.chord')
        .data(chord.chords)
        .enter().append('svg:path')
        .attr('class', 'chord')
        .style('stroke', function(d) { return d3.rgb(fill(d.source.index)).darker(); })
        .style('fill', function(d) { return fill(d.source.index); })
        .attr('d', d3.svg.chord().radius(r0));

    $.each(entityNames,function(i,v){
        $('#label_'+i).mouseover(function() {
            var position = $('#label_'+i).position();
            //console.log(v);
            $('#relations').append('<div class="d3-rel-tooltip" style="top:'+(position.top+30)+'px;left:'+position.left+'px">'+v+'</div>');
            $('#label_'+i).css('fill',d3.select('#path_'+i).style('fill'));
            $('#label_'+i).css('cursor','pointer');
        });
        $('#label_'+i).mouseout(function() {
            $('#label_'+i).css('fill','#000');
            $('#relations .d3-rel-tooltip').remove();
        });
    });
};

module.exports = function CorpusRelationsController($scope, $state, $sce) {
    // get data
    $.getJSON('/api/corpus/' + $scope.currentCorpus._id + '/relations', function(data) {
        var processedData = RelationsProcesser.processData(data);
        createRelChart(processedData, '#relationsContainer');
    });
};

},{"../../modules/RelationsProcesser":20}],8:[function(require,module,exports){
var corpusTypes = require('../data/corpusTypes.js');
var nlpApis = require('../data/nlpApis.js');

module.exports = function CreateCorpusController($scope) {
    // collection of corpus types
    $scope.corpusTypes = corpusTypes;
    // collection of nlp apis
    $scope.nlpApis = nlpApis;

    // current corpus
    $scope.corpusSelection = {index: 0};
    $scope.currentCorpus = $scope.corpusTypes[0];

    // input slider reference
    var $inputCount, $sliderContainer;
    // update view slider
    var updateView = function() {
        $scope.currentCorpus = $scope.corpusTypes[$scope.corpusSelection.index];
        if($scope.currentCorpus.haveItems) {
            if(!$inputCount) {
                $sliderContainer = $('#slider_container');
                $inputCount = $('#input_count');
            } else {
                $inputCount.slider('destroy');
            }
            $sliderContainer.show();
            $inputCount.slider({
                min: $scope.currentCorpus.itemsMin,
                max: $scope.currentCorpus.itemsMax,
                step: 50,
                value: $scope.currentCorpus.itemsDefault,
                tooltip: 'always'
            });
        } else {
            $sliderContainer.hide();
        }
    };

    // update view on model change
    $scope.$watch('corpusSelection', updateView, true);

    // update slider
    $scope.$on('$viewContentLoaded', updateView);

    // analysis start function
    $scope.startAnalysis = function (e) {
        // prevent event
        e.preventDefault();
        // get fields
        var $inputItem = $('#input_item');
        var $inputItemArea = $('#input_item_area');
        var $inputItemFile = $('#input_item_file');
        var $inputCountField = $('input#input_count');
        var $newCorpusForm = $('#newcorpus_form');
        var $inputType = $('input[name=input_type]:checked');

        // remove old warning
        $inputItem.parent().removeClass('has-warning');

        // validate input
        var input = null;
        var corpusType = $scope.currentCorpus.name;
        var inputType = $scope.currentCorpus.inputType;
        switch(inputType) {
            case 'text':
                input = $inputItem.val().trim();
                break;
            case 'textarea':
                input = $inputItemArea.val().trim();
                break;
            case 'file':
                input = $inputItemFile.val();
                break;
        }

        if (!input) {
            $inputItem.parent().addClass('has-warning');
            return;
        }

        // append csrf token to form url
        $newCorpusForm.attr('action', '/api/corpus?_csrf=' + encodeURIComponent($scope.csrf));

        // assign count to input field
        var itemCount = $inputCount.slider('getValue');
        $inputCountField.val(itemCount);

        // remove unneeded inputs & rename last one
        switch(inputType) {
            case 'text':
                $inputItem.attr('name', 'input');
                $inputItemArea.remove();
                $inputItemFile.remove();
                break;
            case 'textarea':
                $inputItem.remove();
                $inputItemArea.attr('name', 'input');
                $inputItemFile.remove();
                break;
            case 'file':
                $inputItem.remove();
                $inputItemArea.remove();
                $inputCountField.remove();
                $inputItemFile.attr('name', 'input');
                break;
        }

        // swap input type value
        $inputType.val(corpusType);

        // send to server
        $newCorpusForm.submit();
    };
};

},{"../data/corpusTypes.js":12,"../data/nlpApis.js":14}],9:[function(require,module,exports){
module.exports = function HomeController($scope) {
    // corpus model
    $scope.corpus = '0';
    // on corpus select event
    $scope.corpusSelect = function() {
        // do not do anything if it's dummy entry
        if($scope.corpus === '0') {
            return;
        }
        // redirect to corpus
        window.location = '/corpus/' + $scope.corpus;
    };
};

},{}],10:[function(require,module,exports){
module.exports = function ProfileController($scope) {
    //
};

},{}],11:[function(require,module,exports){
module.exports = function RegisterController($scope) {
    //
};

},{}],12:[function(require,module,exports){
// build collection of items
var collection = [];
// rss
collection.push({
    name: 'feed',
    description: 'RSS/RDF/ATOM Feed',
    inputType: 'text',
    inputDescription: 'URL of the RSS/RDF/ATOM feed',
    inputPlaceholder: 'URL of your feed',
    haveItems: true,
    itemsMin: 50,
    itemsMax: 600,
    itemsDefault: 50,
});
// wordpress
collection.push({
    name: 'wordpress',
    description: 'WordPress Blog',
    inputType: 'text',
    inputDescription: 'Weblog URL',
    inputPlaceholder: 'URL of the blog',
    haveItems: true,
    itemsMin: 50,
    itemsMax: 400,
    itemsDefault: 400,
});
// blogger
collection.push({
    name: 'blogger',
    description: 'Blogger Blog',
    inputType: 'text',
    inputDescription: 'Weblog URL',
    inputPlaceholder: 'URL of the blog',
    haveItems: true,
    itemsMin: 50,
    itemsMax: 400,
    itemsDefault: 400,
});
// public twitter
collection.push({
    name: 'twitter',
    description: 'Public Twitter account',
    inputType: 'text',
    inputDescription: 'Twitter username',
    inputPlaceholder: 'Username',
    haveItems: true,
    itemsMin: 200,
    itemsMax: 1500,
    itemsDefault: 1000,
});
// slidewiki
collection.push({
    name: 'slidewiki',
    description: 'SlideWiki Deck',
    inputType: 'text',
    inputDescription: 'Deck ID',
    inputPlaceholder: 'Deck ID',
    haveItems: true,
    itemsMin: 50,
    itemsMax: 1000,
    itemsDefault: 400,
});
// webpage
collection.push({
    name: 'webpage',
    description: 'Web page',
    inputType: 'text',
    inputDescription: 'WebPage URL',
    inputPlaceholder: 'URL',
    haveItems: false,
});
// direct input
collection.push({
    name: 'directinput',
    description: 'Direct input',
    inputType: 'textarea',
    inputDescription: 'Your text/html',
    haveItems: false,
});
// upload a doc
collection.push({
    name: 'doc',
    description: 'Upload a document(s)',
    inputType: 'file',
    inputDescription: 'Document',
    haveItems: false,
});

// Our module now returns our view
module.exports = collection;

},{}],13:[function(require,module,exports){
var collection = [];
// overview
collection.push({
    name: 'Overview',
    path: '/overview',
    controller: 'CorpusOverviewController',
    template: '/templates/corpusOverview.html',
    js: require('../controllers/corpus/overview.js'),
});
// facets
collection.push({
    name: 'Facets',
    path: '/facets',
    controller: 'CorpusFacetsController',
    template: '/templates/corpusFacets.html',
    js: require('../controllers/corpus/facets.js'),
});
// relations
collection.push({
    name: 'Entity relations',
    path: '/relations',
    controller: 'CorpusRelationsController',
    template: '/templates/corpusEntityRelations.html',
    js: require('../controllers/corpus/relations.js'),
});
// co-occurance
collection.push({
    name: 'Co-occurrence matrix',
    path: '/cooc',
    controller: 'CorpusCoocController',
    template: '/templates/corpusCooc.html',
    js: require('../controllers/corpus/cooc.js'),
});
// edcat
collection.push({
    name: 'Related databases',
    path: '/datasets',
    controller: 'EdcatDatasetsController',
    template: '/templates/edcatDatasets.html',
    js: require('../controllers/corpus/edcat.js')
});

// Our module now returns our view
module.exports = collection;

},{"../controllers/corpus/cooc.js":2,"../controllers/corpus/edcat.js":3,"../controllers/corpus/facets.js":4,"../controllers/corpus/overview.js":6,"../controllers/corpus/relations.js":7}],14:[function(require,module,exports){
// build collection of items
var collection = [];
// spotlight
collection.push({
    id: 'DBpedia-Spotlight',
    name: 'DBpedia Spotlight',
});
// fox
collection.push({
    id: 'FOX',
    name: 'FOX',
});
// german spotlight
collection.push({
    id: 'DBpedia-Spotlight-DE',
    name: 'DBpedia Spotlight (German)',
});

// Our module now returns our view
module.exports = collection;

},{}],15:[function(require,module,exports){
module.exports = function applyDirectives (app) {
};
},{}],16:[function(require,module,exports){
// load modules
var CorpusModule = require('./modules/corpus');

// init app
var app = angular.module('context-app', ['ngRoute', 'ngAnimate', 'mgcrea.ngStrap', 'CorpusModule']);

// config app routes
require('./routes')(app);

// config app services
require('./services')(app);

// init controllers
require('./controllers')(app);

// config app directives
require('./directives')(app);

// config app filters
require('./filters')(app);

},{"./controllers":1,"./directives":15,"./filters":17,"./modules/corpus":21,"./routes":22,"./services":23}],17:[function(require,module,exports){
module.exports = function applyFilters (app) {
};
},{}],18:[function(require,module,exports){
var diceMetric = function (x, y, xy) {
    return 2 * xy / (x + y);
};

var getCommonArticles = function(entity, entityDouble) {
    return _.intersection(entity.articles, entityDouble.articles);
};

var processData = function(corpus) {
    // entities array
    var entities = {};
    var types = [];
    // find min, max, avg of entities
    var entitiesMin, entitiesMax, entitiesAvg;
    var entitiesTotal = 0;
    // go through all articles
    corpus.articles.forEach(function(article) {
        // calculate stuff
        var count = article.entities.length;
        entitiesTotal += count;
        entitiesMin = _.min([entitiesMin, count]);
        entitiesMax = _.max([entitiesMin, count]);
        // add entities to all array
        article.entities.forEach(function(entity) {
            if(entities[entity.uri]) {
                entities[entity.uri].count++;
                entities[entity.uri].articles.push(article._id);
            } else {
                entities[entity.uri] = entity;
                entities[entity.uri].count = 1;
                entities[entity.uri].articles = [article._id];
            }
            // fill types
            entity.types.forEach(function(type) {
                if(types.indexOf(type) === -1) {
                    types.push(type);
                }
            });
        });
    });
    // count average
    entitiesAvg = Math.floor(entitiesTotal / corpus.articles.length);

    // prepare vars for final data
    var nodes = [];
    var links = [];
    var groups = [];
    var scores = [];
    var entityNames = [];
    var entityURIs = [];
    var index = 0;
    // temp arrays
    var tmp = [];

    // process
    var ekey, entity;
    for(ekey in entities) {
        entity = entities[ekey];
        // push uri
        entityURIs.push(entity.uri);
        // get type
        var type = entity.types[0];
        var typeId = types.indexOf(type);
        groups[typeId] = type;
        // push data
        if (entityNames.indexOf(entity.name) === -1) {
            entityNames.push(entity.name);
            nodes.push({name: entity.name, uri: entity.uri, group: typeId});
        } else {
            index++;
            entityNames.push(entity.name + '#' + index);
            nodes.push({name: entity.name + '#' + index, uri: entity.uri, group: typeId});
        }
    }

    // process
    for(ekey in entities) {
        entity = entities[ekey];
        // prepare row data
        var score = [];

        // go through entities again
        for(var ekey2 in entities) {
            var entityDouble = entities[ekey2];
            if (entity.uri !== entityDouble.uri) {
                var key = entity._id + '-' + entityDouble._id;
                var reverseKey = entityDouble._id + '-' + entity._id;
                if (tmp.indexOf(key) === -1 && tmp.indexOf(reverseKey) === -1) {
                    //give me the number of articles that have both  $i ['uri'] and $j ['uri'] entities
                    var common = getCommonArticles(entity, entityDouble);
                    var scoreValue = [diceMetric(entity.articles.length, entityDouble.articles.length, common.length)];
                    score.push(scoreValue);
                    links.push({
                        source: entityURIs.indexOf(entity.uri),
                        target: entityURIs.indexOf(entityDouble.uri),
                        value: common ? common.length : 0,
                        articles: common
                    });
                }
            }
        }

        // push scores
        scores.push(score);
    }

    // get threshold from middle of scores
    var sortedScores = [];
    // get scores
    scores.forEach(function(score) {
        score.forEach(function(num) {
            if(num > 0) {
                sortedScores.push(num[0]);
                threshold += num;
            }
        });
    });
    // sort
    sortedScores = sortedScores.sort();
    // get threshold
    var center = Math.floor(sortedScores.length / 2);
    var threshold = sortedScores[center];

    //remove noises
    scores.forEach(function(row, index){
        if(score < threshold) {
            links[index].value=0;
            links[index].articles='';
        }
    });

    return {
        nodes: nodes,
        links: links,
        groups: groups
    };
};

exports.processData = processData;
},{}],19:[function(require,module,exports){
var escapeRegExp = function(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
};

var processData = function(data) {
    // articles
    var articles = [];
    // types
    var types = [];
    var typeNames = [];
    // entities
    var entities = [];
    var entityNames = [];

    // extract data
    data.articles.forEach(function(item) {
        // get article data
        var title = '';
        try {
            var dom = $(item.source);
            title = item.title || dom.text();
        } catch(e) {
            title = item.source;
        }
        title = title.slice(0, 30) + '...';
        var article = {
            id: item._id,
            name: title,
            type: 'article',
            count: 0,
            entities: [],
            types: [],
            source: item.source,
        };

        // get article plain text
        var sourceText = S(item.source).stripTags().s;
        // split plain text and full source into words
        var srcText = sourceText.split(/\s/);
        var src = item.source.split(/\s/);
        // split using additional characters for better processing
        for(var i = 0; i < srcText.length; i++) {
            var it = srcText[i];
            it = it.split('/');
            srcText[i] = it;
        }
        // flatten arrays
        srcText = _.flatten(srcText);

        var findSourceIndex = function(word, cleanWord, entityName, startIndex) {
            startIndex = startIndex || -1;
            // try to get plain match from original source
            var sourceIndex = src.indexOf(word, startIndex);
            // if not found, find by string
            if(sourceIndex === -1) {
                //if(entityName === testEntity) console.log('searching index in array');
                for(var i = 0; i < src.length; i++){
                    var srcWord = src[i];
                    // clean from hrefs
                    var srcWordClean = srcWord.replace(/href="(.+?)"(.*?>?)/, '').replace(/src="(.+?)"(.*?>?)/, '').replace(/alt="(.+?)"(.*?>?)/, '');
                    // skip if containes marking parts
                    if(srcWordClean.indexOf('span%marked%') !== -1) {
                        continue;
                    }

                    // check for match
                    if(srcWordClean.match(new RegExp(matchRegStart+escapeRegExp(cleanWord)+matchReg)) && i >= startIndex) {
                        sourceIndex = i;
                        break;
                    }
                }
            }

            return sourceIndex;
        };

        var cleanReg = /(^[\W]+)|([\W]+$)/g;
        var matchRegStart = '';
        var matchReg = '(\\W?)';

        // get entities
        item.entities.forEach(function(entity){
            var entityParts = entity.name.split(' ');

            // if only one word
            if(entityParts.length === 1) {
                // find word that matches current entity
                srcText.forEach(function(word, index) {
                    // clean word from commas, dots and other suplementary stuff
                    var cleanWord = word.replace(cleanReg, '');
                    var entityClean = entity.name.replace(cleanReg, '');

                    // cehck match
                    if(cleanWord === entity.name || word === entity.name) {
                        // get match from original source
                        var sourceIndex = findSourceIndex(word, cleanWord, entity.name);
                        // if word was found
                        if(sourceIndex !== -1) {
                            var origSrc = src[sourceIndex];
                            var link = origSrc.match(/href="(.+?)"/);
                            var img = origSrc.match(/src="(.+?)"/);
                            var alt = origSrc.match(/alt="(.+?)"/);
                            if(link) {
                                link = link[1];
                                origSrc = origSrc.replace(link, '%link%');
                            }
                            if(img) {
                                img = img[1];
                                origSrc = origSrc.replace(img, '%img%');
                            }
                            if(alt) {
                                alt = alt[1];
                                origSrc = origSrc.replace(alt, '%alt%');
                            }

                            // enrich source
                            src[sourceIndex] = origSrc.replace(
                                entity.name,
                                '<span%marked% class="label label-warning hasTooltip" data-toggle="tooltip" title="' +
                                entity.types.join(' ') + '">' + entity.name + '</span%marked%>'
                            );

                            if(link) {
                                src[sourceIndex] = src[sourceIndex].replace('%link%', link);
                            }
                            if(img) {
                                src[sourceIndex] = src[sourceIndex].replace('%img%', img);
                            }
                            if(alt) {
                                src[sourceIndex] = src[sourceIndex].replace('%alt%', alt);
                            }
                        }

                        return;
                    }
                });
            } else {
                // check match
                var firstWord = entityParts[0];
                var lastWord = entityParts[entityParts.length-1];
                // find word that matches current entity
                srcText.forEach(function(word, index) {
                    // clean word from commas, dots and other suplementary stuff
                    var cleanWord = word.replace(cleanReg, '');
                    if(cleanWord.indexOf('span%marked%') !== -1) {
                        return;
                    }
                    // test match
                    var match = firstWord.match(new RegExp(matchRegStart+escapeRegExp(cleanWord)+matchReg)) !== null;
                    if(match) {
                        var i = 0;
                        for(i = 1; i < entityParts.length; i++) {
                            if(index+i >= srcText.length) {
                                continue;
                            }

                            var nextCleanWord = srcText[index+i].replace(cleanReg, '');
                            if(nextCleanWord.indexOf('span%marked%') !== -1) {
                                continue;
                            }
                            match = match && entityParts[i].match(new RegExp(matchRegStart+escapeRegExp(nextCleanWord)+matchReg)) !== null;
                        }

                        // check complete match
                        if(match) {
                            // Replace first part
                            // get match from original source
                            var sourceStartIndex = findSourceIndex(word, cleanWord, firstWord, index);

                            // Replace end part
                            var endIndex = index+entityParts.length-1;
                            if(endIndex >= srcText.length) {
                                return;
                            }
                            var endWord = srcText[endIndex];
                            var endCleanWord = endWord.replace(/[^\w]/, '');
                            // try to get plain match from original source for start
                            var sourceEndIndex = findSourceIndex(endWord, endCleanWord, lastWord, endIndex);

                            // if word was found
                            if(sourceStartIndex !== -1 && sourceEndIndex !== -1 && Math.abs(sourceStartIndex - sourceEndIndex) < 5) {
                                // enrich source
                                src[sourceStartIndex] = src[sourceStartIndex].replace(
                                    new RegExp(escapeRegExp(firstWord)+'$'),
                                    '<span%marked% class="label label-warning hasTooltip" data-toggle="tooltip" title="' +
                                    entity.types.join(' ') + '">' + firstWord
                                );

                                // enrich source
                                src[sourceEndIndex] = src[sourceEndIndex].replace(lastWord, lastWord + '</span%marked%>');
                            }
                        }
                        return;
                    }
                });
            }

            // get entity data
            var ind = entityNames.indexOf(entity.name);
            var newEntity;
            if(ind !== -1) {
                newEntity = entities[ind];
                entities[ind].count += 1;
                if(entities[ind].articles.indexOf(article.id) === -1) {
                    entities[ind].articles.push(article.id);
                }
                if(article.entities.indexOf(newEntity.id) === -1) {
                    article.entities.push(newEntity.id);
                }
            } else {
                newEntity = {
                    id: entity._id,
                    name: entity.name,
                    type: 'entity',
                    count: 1,
                    articles: [article.id],
                    types: []
                };
                article.entities.push(newEntity.id);
            }

            // get types
            entity.types.forEach(function(type){
                // get type data
                var name = type.split(':')[1];
                var tid = 'type_'+name;
                var ind = typeNames.indexOf(name);
                if(ind !== -1) {
                    types[ind].count += 1;
                    types[ind].entities.push(newEntity.id);
                    types[ind].articles.push(article.id);
                    if(newEntity.types.indexOf(tid) === -1) {
                        newEntity.types.push(tid);
                    }
                    if(article.types.indexOf(tid) === -1) {
                        article.types.push(tid);
                    }
                } else {
                    types.push({
                        id: tid,
                        name: name,
                        type: 'type',
                        count: 1,
                        entities: [newEntity.id],
                        articles: [article.id],
                    });
                    if(newEntity.types.indexOf(tid) === -1) {
                        newEntity.types.push('type_'+name);
                    }
                    if(article.types.indexOf(tid) === -1) {
                        article.types.push('type_'+name);
                    }
                    typeNames.push(name);
                }
            });

            if(ind === -1) {
                entities.push(newEntity);
                entityNames.push(newEntity.name);
            }
        });

        // join source back
        item.source = src.join(' ').replace(/span%marked%/g, 'span');
        article.source = item.source;

        // push to array
        articles.push(article);
    });

    // sort arrays by count
    var sortFunction = function(a, b) {
        return b.count - a.count;
    };
    entities = entities.sort(sortFunction);
    types = types.sort(sortFunction);

    return {
        articles: articles,
        types: types,
        entities: entities
    };
};

// expose
exports.processData = processData;

},{}],20:[function(require,module,exports){
var diceMetric = function (x, y, xy) {
    return 2 * xy / (x + y);
};

var getCommonArticles = function(entity, entityDouble) {
    var common = _.intersection(entity.articles, entityDouble.articles);
    return common ? common.length : 0;
};

var processData = function(corpus) {
    // entities array
    var entities = {};
    // find min, max, avg of entities
    var entitiesMin, entitiesMax, entitiesAvg;
    var entitiesTotal = 0;
    // go through all articles
    corpus.articles.forEach(function(article) {
        // calculate stuff
        var count = article.entities.length;
        entitiesTotal += count;
        entitiesMin = _.min([entitiesMin, count]);
        entitiesMax = _.max([entitiesMin, count]);
        // add entities to all array
        article.entities.forEach(function(entity) {
            if(entities[entity.uri]) {
                entities[entity.uri].count++;
                entities[entity.uri].articles.push(article._id);
            } else {
                entities[entity.uri] = entity;
                entities[entity.uri].count = 1;
                entities[entity.uri].articles = [article._id];
            }
        });
    });
    // count average
    entitiesAvg = Math.floor(entitiesTotal / corpus.articles.length);

    // prepare vars for final data
    var relations = [];
    var scores = [];
    var entityNames = [];
    var entityURIs = [];
    var index = 0;
    // temp arrays
    var tmp = [];
    var tmp4 = [];

    // process
    for(var ekey in entities) {
        var entity = entities[ekey];
        // prepare row data
        var row = [];
        var score = [];

        // go through entities again
        for(var ekey2 in entities) {
            var entityDouble = entities[ekey2];
            if (entity.uri === entityDouble.uri) {
                row.push(0);
                score.push(0);
            } else {
                var key = entity._id + '-' + entityDouble._id;
                var reverseKey = entityDouble._id + '-' + entity._id;
                if (tmp.indexOf(key) !== -1) {
                    row.push(tmp[key]);
                    score.push(tmp4[key]);
                } else if (tmp.indexOf(reverseKey) !== -1) {
                    row.push(tmp[reverseKey]);
                    score.push(tmp4[reverseKey]);
                } else {
                    //give me the number of articles that have both  $i ['uri'] and $j ['uri'] entities
                    var commonCount = getCommonArticles(entity, entityDouble);
                    tmp[key] = commonCount;
                    row.push(tmp[key]);
                    tmp4[key] = [diceMetric(entity.articles.length, entityDouble.articles.length, commonCount)];
                    score.push(tmp4[key]);
                }
            }
        }

        // push data if needed
        // push name
        if (entityNames.indexOf(entity.name) === -1) {
            entityNames.push(entity.name);
        } else {
            index++;
            entityNames.push(entity.name + '#' + index);
        }
        // push uri
        entityURIs.push(entity.uri);
        // relations
        relations.push(row);
        // scores
        scores.push(score);
    }

    // get threshold from middle of scores
    var sortedScores = [];
    // get scores
    scores.forEach(function(score) {
        score.forEach(function(num) {
            if(num > 0) {
                sortedScores.push(num[0]);
                threshold += num;
            }
        });
    });
    // sort
    sortedScores = sortedScores.sort();
    // get threshold
    var center = Math.floor(sortedScores.length / 2);
    var threshold = sortedScores[center];

    //remove noises
    scores.forEach(function(row, index){
        row.forEach(function(score, subindex){
            if(score < threshold) {
                relations[index][subindex] = 0;
            }
        });
    });

    return {
        relations: relations,
        scores: scores,
        entityNames: entityNames,
        entityURIs: entityURIs
    };
};

exports.processData = processData;
},{}],21:[function(require,module,exports){
// get extentions
var extentions = require('../data/corpusextentions');

// init module
var corpusModule = angular.module('CorpusModule', ['ui.router']);

// config routes
corpusModule.config(function ($stateProvider, $urlRouterProvider) {
    // main view
    $stateProvider.state('corpus', {
        url: '/corpus/:id',
        controller: require('../controllers/corpus/main'),
        templateUrl: '/templates/corpusView.html',
        resolve: {
            corpus: ['$http', '$stateParams', function($http, $stateParams) {
                return $http({method: 'GET', url: '/api/corpus/' + $stateParams.id});
            }]
        }
    });

    // make view routes for extentions
    extentions.forEach(function(ex) {
        $stateProvider.state('corpus.' + ex.name, {
            url: ex.path,
            templateUrl: ex.template,
            controller: ex.controller,
        });
    });
});

// register controllers
extentions.forEach(function(ex) {
    corpusModule.controller(ex.controller, ['$scope', '$state', '$sce', ex.js]);
});

// export
module.exports = corpusModule;

},{"../controllers/corpus/main":5,"../data/corpusextentions":13}],22:[function(require,module,exports){
module.exports = function applyRoutes (app) {
    app.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
        $routeProvider.when('/', { controller: 'HomeController', template: '' });
        $routeProvider.when('/auth', { controller: 'LoginController', template: '' });
        $routeProvider.when('/register', { controller: 'RegisterController', template: '' });
        $routeProvider.when('/createCorpus', { controller: 'CreateCorpusController', templateUrl: '/templates/createCorpus.html' });

        $locationProvider.html5Mode(true);
    }]);
};
},{}],23:[function(require,module,exports){
module.exports = function applyServices (app) {
};

},{}]},{},[16])
//# sourceMappingURL=data:application/json;base64,
